[1mdiff --git a/icarus-main.ino b/icarus-main.ino[m
[1mnew file mode 100644[m
[1mindex 0000000..0a34416[m
[1m--- /dev/null[m
[1m+++ b/icarus-main.ino[m
[36m@@ -0,0 +1,231 @@[m
[32m+[m[32m#include <SparkFunMMA8452Q.h>[m
[32m+[m[32m#include <math.h>[m
[32m+[m[32m#include "Adafruit_GFX.h"[m
[32m+[m[32m#include "Adafruit_PCD8544.h"[m
[32m+[m
[32m+[m[32mAdafruit_PCD8544 display = Adafruit_PCD8544(SS, D2, D3);                                                            //initializes the display object for the LCD screen[m
[32m+[m[32mMMA8452Q accel;                                                                                                     //initializes the accelerometer object[m
[32m+[m
[32m+[m[32mconst int thermistorInput = A0;                                                                                     //the thermistor is connected via ADC pin A0[m
[32m+[m[32mconst int ambientOutput = A1;                                                                                       //the ambient temp sensor is connected via ADC pin A1[m
[32m+[m[32mconst int refCellOutput = A6;                                                                                       //the reference cell is connected via ADC pin A2[m
[32m+[m[32mconst int mainButton = D4;                                                                                          //this input button turns the wifi on and off[m
[32m+[m[32mconst int tempButton = D5;                                                                                          //this input button switches the LCD back to the main display screen[m
[32m+[m[32mconst int maxButton = D6;                                                                                           //this input button switches the LCD screen to display the temperatures[m
[32m+[m[32mconst int thermocouplePin = WKP;[m
[32m+[m
[32m+[m[32mdouble supplyVoltage = 3.3;                                                                                         //the supply voltage for the different compentents is 3.3 volts[m
[32m+[m[32mint adcLevel = 4095;                                                                                                //as the ADC is a 12-bit ADC, has 0-4095 discrete levels of values[m
[32m+[m[32mdouble ambientTemp = 0;[m
[32m+[m[32mdouble thermistorTemp = 0.0;[m
[32m+[m[32mdouble irradiance = 0.0;[m
[32m+[m[32mdouble theta = 0.0;                                                                                                 //the degree value for the Y-axis of the Icarus instrument[m
[32m+[m[32mdouble adcRange = -1024;[m
[32m+[m[32mint degreeRange = 90;[m
[32m+[m[32mdouble maxAngle = 0.0;[m
[32m+[m[32mdouble maxIrradiance = 0.0;[m
[32m+[m
[32m+[m[32mbool wifiFlag = false;[m
[32m+[m[32mbool mainScreen = true;[m
[32m+[m[32mbool tempScreen = false;[m
[32m+[m[32mbool maxScreen = false;[m
[32m+[m
[32m+[m[32mSYSTEM_MODE(SEMI_AUTOMATIC);                                                                                        //enables manual control of wifi on or off[m
[32m+[m
[32m+[m[32mvoid setup()   {[m
[32m+[m[32m    pinMode(A0, INPUT);                                                                                             //this is for the thermistor[m
[32m+[m[32m    pinMode(A1, INPUT);                                                                                             //this is for the TMP36 ambient temp sensor[m
[32m+[m[32m    pinMode(A6, INPUT);                                                                                             //reference cell input assignment[m
[32m+[m[32m    pinMode(D4, INPUT);[m
[32m+[m[32m    pinMode(D5, INPUT);[m
[32m+[m[32m    pinMode(D6, INPUT);[m
[32m+[m[32m    pinMode(D7, INPUT);[m
[32m+[m[32m    pinMode(WKP, INPUT);[m
[32m+[m[41m    [m
[32m+[m[32m    accel.begin(SCALE_2G, ODR_1);                                                                                   //begins the accelerometer object, with a scale of +-2g's, and a 1Hz refresh rate[m
[32m+[m[41m    [m
[32m+[m[32m    Serial.begin(9600);                                                                                             //begins the serial[m
[32m+[m[32m    display.begin();                                                                                                //initializes the display[m
[32m+[m[32m    display.setContrast(55);                                                                                        //changes the contrast to ease reading[m
[32m+[m[32m    display.display();                                                                                              //show opening screen ni the buffer[m
[32m+[m[32m    delay(1000);[m
[32m+[m[32m    display.clearDisplay();                                                                                         // clears the screen and buffer[m
[32m+[m[32m    display.setTextSize(1);                                                                                         //changes text size in buffer[m
[32m+[m[32m    display.setTextColor(BLACK);                                                                                    //sets the text color[m
[32m+[m[32m    display.setCursor(0,0);                                                                                         //sets the location of printing to 0,0 pixel[m
[32m+[m[32m    display.display();                                                                                              //displays all text in the buffer and clears the buffer[m
[32m+[m[32m    delay(1000);[m
[32m+[m[32m    display.clearDisplay();[m
[32m+[m[41m  [m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mvoid loop() {[m
[32m+[m[32m    accel.read();                                                                                                   //reads the accelerometer data[m
[32m+[m[32m    irradiance = getIrradiance();[m
[32m+[m[32m    thermistorTemp = getThermistorTemp(getThermistorVoltage());[m
[32m+[m[32m    ambientTemp = getAmbientTemp();[m
[32m+[m[41m    [m
[32m+[m[32m    if (wifiFlag == true) {[m
[32m+[m[32m        Particle.publish("Thermistor_Temperature", String(thermistorTemp, 2));                                      //stores the thermistor temperature variable in the cloud[m
[32m+[m[32m        Particle.publish("Ambient_Temperature", String(ambientTemp,2));                                             //stores the ambient temperature variable in the cloud[m
[32m+[m[32m        Particle.publish("Irradiance", String(irradiance,2));                                                       //stores the irradiance variable in the cloud[m
[32m+[m[32m        Particle.publish("Incline", String(theta,2));                                                               //sores the incline degree in the cloud[m
[32m+[m[32m    }[m
[32m+[m[41m    [m
[32m+[m[32m    theta = accel.x / adcRange * degreeRange;                                                                       //scales the ADC value read from accelerometer to an angle measurement in positive[m
[32m+[m[32m    irradiance = round(irradiance * 10) / 10;                                                                       //rounds the degrees to the nearest tenth[m
[32m+[m[32m    theta = round(theta * 10) / 10;[m
[32m+[m[32m    ambientTemp = round(ambientTemp * 10) / 10;[m
[32m+[m[32m    thermistorTemp = round(thermistorTemp * 10) / 10;[m
[32m+[m[41m    [m
[32m+[m[32m    String screen = "";[m
[32m+[m[41m    [m
[32m+[m[32m    if (digitalRead(mainButton) == 0) {                                                                             //these if/else if conditionals check for if a button is pressed, and if so[m[41m [m
[32m+[m[32m        screen = "main";[m
[32m+[m[32m    }[m
[32m+[m[32m    else if (digitalRead(tempButton) == 0) {[m
[32m+[m[32m        screen = "temp";[m
[32m+[m[32m    }[m
[32m+[m[32m    else if (digitalRead(maxButton) == 0) {[m
[32m+[m[32m        screen = "max";[m
[32m+[m[32m    }[m
[32m+[m[41m    [m
[32m+[m[32m    setScreen(screen);[m
[32m+[m[41m    [m
[32m+[m[32m    if (mainScreen == true) {[m
[32m+[m[32m        display.println("Degrees: " + String(theta, 2));                                                            //truncates the extraneos zeroes in the float, so as to not imply a greater degree of precision[m
[32m+[m[32m        display.println();[m
[32m+[m[32m        display.println(String(irradiance, 1) + "  W/m^2");[m
[32m+[m[32m    }[m
[32m+[m[32m    else if (tempScreen == true) {[m
[32m+[m[32m        display.println("Temp: " + String(ambientTemp, 2));[m
[32m+[m[32m        display.println();[m
[32m+[m[32m        display.println("Therm: " + String(thermistorTemp, 2));[m
[32m+[m[32m    }[m
[32m+[m[32m    else if (maxScreen == true) {[m
[32m+[m[32m        findMax();[m
[32m+[m[32m    }[m
[32m+[m[32m    display.display();[m
[32m+[m[32m    delay(1000);[m
[32m+[m[32m    display.clearDisplay();[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m//returns the value of the irradiance in Watts/m^2, as a double to one decimal point[m
[32m+[m[32mdouble getIrradiance() {[m
[32m+[m[32m  double thermistorVoltage, measuredShortCurrent;[m
[32m+[m[32m  double referenceShortCurrent = 0.0586;[m
[32m+[m[32m  double tempCoefficient = 0.0000265;[m
[32m+[m[32m  int refThermTemp = 25;[m
[32m+[m[32m  int refIrradiance = 1000;[m
[32m+[m
[32m+[m[32m  thermistorVoltage = getThermistorVoltage();                                                                       //gets the voltage across the thermistor[m
[32m+[m[32m  thermistorTemp = getThermistorTemp(thermistorVoltage);                                                            //gets the temperature of the thermistor by passing in the current voltage across the thermistor[m
[32m+[m[32m  measuredShortCurrent = getShortCurrent();                                                                         //gets the short-circuit current across the solar cell[m
[32m+[m
[32m+[m[32m  irradiance = refIrradiance * measuredShortCurrent / referenceShortCurrent * (1 - tempCoefficient * (thermistorTemp - refThermTemp));[m
[32m+[m[32m                                                                                                                    //uses the measured current across the reference cell, the voltage from the cell,[m
[32m+[m[32m                                                                                                                    //and the reference and measured temperature from the thermistor to calculate irradiance[m
[32m+[m[32m  irradiance = round(irradiance * 10) / 10;                                                                         //rounds irradiance off to one decimal point[m
[32m+[m[32m  return irradiance;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m//reads the analog input from the thermistor, and returns the temperature in Celsius[m
[32m+[m[32mdouble getThermistorTemp(double thermistorVoltage) {[m
[32m+[m[32m  int voltDivResistor = 10000;                                                                                      //our resistror used in the voltage divider is a 10k Ohm resistor[m
[32m+[m[32m  double thermB = 3428;                                                                                             //example value;[m[41m [m
[32m+[m[32m  int refTemp = 25;                                                                                                 //the reference temperature is give nas 25 degrees Celsius[m
[32m+[m
[32m+[m[32m  double thermValue, thermResistance, temp;[m
[32m+[m
[32m+[m[32m  thermResistance = (supplyVoltage - thermistorVoltage) / (thermistorVoltage / voltDivResistor);[m
[32m+[m[32m                                                                                                                    //gets the thermistor resistance by using the[m[41m [m
[32m+[m[32m  temp = thermB * (refTemp + 273.15) / (log(thermResistance / voltDivResistor) * (refTemp + 273.15) + thermB) - 273.15;[m
[32m+[m[32m  temp = round(temp * 10) / 10;                                                                                     //this rounds the temp value to one decimal place[m
[32m+[m[32m  return temp;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m//reads the analog input from the TMP36 analog sensor, and returns the temperature in Celsius[m
[32m+[m[32mdouble getAmbientTemp() {[m
[32m+[m[32m  double analogTempValue = analogRead(ambientOutput);[m
[32m+[m[32m  return ((analogTempValue * 3.3 / 4096) / .03 - 50);                                                               //this is the temperature equation for the TMP36 sensor[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m//gets the voltage reading from the thermistor[m
[32m+[m[32mdouble getThermistorVoltage() {[m
[32m+[m[32m  return analogRead(thermistorInput) * supplyVoltage / adcLevel;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m//gets the short circuit current reading from the reference cell[m
[32m+[m[32mdouble getShortCurrent() {[m
[32m+[m[32m  double shuntResistance = 0.08;[m
[32m+[m[32m  double gain = 500.0;[m
[32m+[m[32m  double cellVoltage = analogRead(refCellOutput) * 3.3 / 4096;                                                      //reads analog reading and converts ADC value to voltage using max volts and the 12-bit value[m
[32m+[m[32m  return ((cellVoltage / gain) / shuntResistance);[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m//finds the max irradiance and angle associated with that irradiance when rotating the instrument about the x-axis for 5 seconds[m
[32m+[m[32mvoid findMax() {[m
[32m+[m[32m    display.println("Please rotate Icarus around its X-axis in 5...");[m
[32m+[m[32m    display.display();[m
[32m+[m[32m    delay(3000);[m
[32m+[m[32m    display.clearDisplay();[m
[32m+[m[32m    display.println("4...");[m
[32m+[m[32m    display.display();[m
[32m+[m[32m    delay(1000);[m
[32m+[m[32m    display.clearDisplay();[m
[32m+[m[32m    display.println("3...");[m
[32m+[m[32m    display.display();[m
[32m+[m[32m    delay(1000);[m
[32m+[m[32m    display.clearDisplay();[m
[32m+[m[32m    display.println("2...");[m
[32m+[m[32m    display.display();[m
[32m+[m[32m    delay(1000);[m
[32m+[m[32m    display.clearDisplay();[m
[32m+[m[32m    display.println("1...");[m
[32m+[m[32m    display.display();[m
[32m+[m[32m    delay(1000);[m
[32m+[m[32m    display.clearDisplay();[m
[32m+[m[32m    display.println("Calculating...");[m
[32m+[m[32m    display.display();[m
[32m+[m[41m    [m
[32m+[m[32m    for (int i = 0; i < 10; i++) {[m
[32m+[m[32m        irradiance = getIrradiance();[m
[32m+[m[32m        theta = accel.x / adcRange * degreeRange;                                                                       //scales the ADC value read from accelerometer to an angle measurement in positive[m
[32m+[m[41m        [m
[32m+[m[32m        irradiance = round(irradiance * 10) / 10;                                                                       //rounds the degrees to the nearest tenth[m
[32m+[m[32m        theta = round(theta * 10) / 10;[m
[32m+[m[41m        [m
[32m+[m[32m        if (irradiance > maxIrradiance) {                                                                               //compares the values read with the current, and saves as new max and angle if the values are greate[m
[32m+[m[32m            maxIrradiance = irradiance;[m
[32m+[m[32m            maxAngle = theta;[m
[32m+[m[32m        }[m
[32m+[m[41m        [m
[32m+[m[32m        delay(250);[m
[32m+[m[32m    }[m
[32m+[m[41m    [m
[32m+[m[32m    display.println("Max: " + String(maxIrradiance, 2));[m
[32m+[m[32m    display.println("Angle: " + String(maxAngle, 2));[m
[32m+[m[32m    display.display();[m
[32m+[m[32m    delay(10000);[m
[32m+[m[32m    display.clearDisplay();[m
[32m+[m[32m    setScreen("main");[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m//compares the string parameter passed in, and depending on the value will set the boolean flags to correspond with the button pressed[m
[32m+[m[32mvoid setScreen(String screen) {[m
[32m+[m[32m    if (screen == "main") {[m
[32m+[m[32m        mainScreen = true;[m
[32m+[m[32m        tempScreen = false;[m
[32m+[m[32m        maxScreen = false;[m
[32m+[m[32m    }[m
[32m+[m[32m    else if (screen == "temp") {[m
[32m+[m[32m        mainScreen = false;[m
[32m+[m[32m        tempScreen = true;[m
[32m+[m[32m        maxScreen = false;[m
[32m+[m[32m    }[m
[32m+[m[32m    else if (screen == "max") {[m
[32m+[m[32m        mainScreen = false;[m
[32m+[m[32m        tempScreen = false;[m
[32m+[m[32m        maxScreen = true;[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
\ No newline at end of file[m
